// Generated by CoffeeScript 1.4.0
(function() {
  var async, crypto, fs, hash, mime, mkdirp, outcome, path, rmdir, sift, step, walkr, winston;

  walkr = require("walkr");

  outcome = require("outcome");

  step = require("stepc");

  fs = require("fs");

  async = require("async");

  sift = require("sift");

  winston = require("winston");

  crypto = require("crypto");

  path = require("path");

  mkdirp = require("mkdirp");

  hash = crypto.createHash("md5");

  rmdir = require("rmdir");

  mime = require("mime");

  outcome.logAllErrors(false);

  module.exports = (function() {
    /*
    */

    function _Class(s3cp, options) {
      this.s3cp = s3cp;
      this.options = options;
      this._s3 = s3cp._s3;
      if (!this.options.limit) {
        this.options.limit = 1;
      }
    }

    /*
    */


    _Class.prototype.start = function(callback) {
      var o, self;
      o = outcome.e(callback);
      self = this;
      return step.async((function() {
        return self._scanLocalFiles(this);
      }), (function() {
        return self._makeLocalManifest(this);
      }), o.s(function() {
        return self._downloadManifest(this);
      }), o.s(function() {
        return self._computeManifestDifference(this);
      }), callback);
    };

    /*
    */


    _Class.prototype.upload = function(callback) {
      var o, self;
      self = this;
      o = outcome.e(function(err) {
        return callback();
      });
      return step(o.s(function() {
        return self._removeRemoteFiles(this);
      }), o.s(function() {
        return self._uploadFiles(this);
      }), (function() {
        return self._uploadManifest(this);
      }), callback);
    };

    /*
    */


    _Class.prototype.redownload = function(callback) {
      var _this = this;
      if (fs.existsSync(this.options.path)) {
        return rmdir(this.options.path, function() {
          return _this.download(callback);
        });
      } else {
        return this.download(callback);
      }
    };

    /*
    */


    _Class.prototype.download = function(callback) {
      var o, self;
      o = outcome.e(function(err) {
        return callback();
      });
      self = this;
      return step.async(o.s(function() {
        return self._removeLocalFiles(this);
      }), o.s(function() {
        return self._downloadFiles(this);
      }), function() {
        return callback();
      });
    };

    /*
    */


    _Class.prototype._removeLocalFiles = function(callback) {
      return async.eachSeries(this._remoteManifestDiff, (function(file, next) {
        var o;
        o = outcome.e(function() {
          return next();
        });
        return step.async((function() {
          return fs.lstat(file.lpath, this);
        }), o.s(function(stat) {
          if (stat.isDirectory()) {
            if (file.exists) {
              return next();
            }
            return rmdir(file.lpath, this);
          } else {
            return fs.unlink(file.lpath, this);
          }
        }), function() {
          winston.info("local del " + file.rpath);
          return next();
        });
      }), callback);
    };

    /*
    */


    _Class.prototype._downloadFiles = function(callback) {
      var _this = this;
      return async.eachLimit(this._remoteManifestDiff, 1, (function(file, next) {
        var o, self;
        if (file.dir) {
          return next();
        }
        self = _this;
        o = outcome.e(function() {
          return next();
        });
        winston.info("s3 get " + file.rpath);
        return step.async((function() {
          return mkdirp(path.dirname(file.lpath), this);
        }), (function() {
          return self._s3.getFile(file.rpath.replace(/\s/g, "%20"), this);
        }), o.s(function(res) {
          var stream,
            _this = this;
          if (res.statusCode !== 200) {
            winston.error("s3 ERR get " + file.rpath + " - statusCode=" + res.statusCode);
            return next();
          }
          stream = fs.createWriteStream(file.lpath, {
            flags: "w+"
          });
          res.pipe(stream);
          stream.on("close", this);
          return stream.on("error", function(err) {
            winston.error("s3 ERR get " + file.rpath + " - errcode=" + err.code);
            return _this();
          });
        }), (function() {
          return next();
        }));
      }), callback);
    };

    /*
       Downloads the manifest - desription of files that are currently on the server
    */


    _Class.prototype._downloadManifest = function(callback) {
      var o, self;
      winston.info("s3 get " + (this._manifestPath()));
      o = outcome.e(callback);
      self = this;
      self._remoteManifest = [];
      return step.async((function() {
        return self._s3.getFile(self._manifestPath(), this);
      }), o.s(function(res) {
        var buffer, next;
        buffer = [];
        if (res.statusCode === 404) {
          return this();
        }
        next = this;
        res.on("data", function(chunk) {
          return buffer.push(String(chunk));
        });
        return res.on("end", function() {
          try {
            self._remoteManifest = JSON.parse(buffer.join(""));
          } catch (e) {

          }
          return next();
        });
      }), callback);
    };

    /*
    */


    _Class.prototype._computeManifestDifference = function(callback) {
      winston.silly("compare file diff");
      this._localManifestDiff = this._diffManifest(this._localManifest, this._remoteManifest);
      this._remoteManifestDiff = this._diffManifest(this._remoteManifest, this._localManifest);
      return callback();
    };

    /*
    */


    _Class.prototype._removeRemoteFiles = function(callback) {
      var chunkSize, chunks, i, _i, _ref,
        _this = this;
      chunks = [];
      chunkSize = 1000;
      for (i = _i = 0, _ref = this._remoteManifestDiff.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = _i += chunkSize) {
        chunks.push(this._remoteManifestDiff.slice(i, i + chunkSize).map(function(file) {
          return file.rpath;
        }));
      }
      return async.eachSeries(chunks, (function(files, next) {
        var file, _j, _len;
        for (_j = 0, _len = files.length; _j < _len; _j++) {
          file = files[_j];
          console.log("s3 del %s", file);
        }
        return _this._s3.deleteMultiple(files, function() {
          return next();
        });
      }), callback);
    };

    /*
    */


    _Class.prototype._uploadFiles = function(callback) {
      var _this = this;
      winston.info("upload limit: " + this.options.limit);
      return async.eachLimit(this._localManifestDiff, this.options.limit, (function(file, next) {
        var retry, tries;
        if (file.dir) {
          return next();
        }
        tries = 10;
        retry = function() {
          if (!--tries) {
            return next();
          }
          winston.info("s3 put " + file.rpath);
          return _this._s3.putFile(file.lpath, file.rpath.replace(/%20/g, " "), function(err) {
            if (err) {
              winston.error("s3 put " + file.rpath + " ERR " + err.message);
              return retry();
            }
            return next();
          });
        };
        return retry();
      }), callback);
    };

    /*
    */


    _Class.prototype._diffManifest = function(fromManifest, toManifest) {
      var _this = this;
      return fromManifest.filter(function(fromFile) {
        var found, toFile, _i, _len;
        found = false;
        for (_i = 0, _len = toManifest.length; _i < _len; _i++) {
          toFile = toManifest[_i];
          if (toFile.rpath === fromFile.rpath) {
            found = true;
            fromFile.exists = true;
            return toFile.mtime < fromFile.mtime;
          }
        }
        fromFile.exists = false;
        return !found;
      });
    };

    /*
    */


    _Class.prototype._scanLocalFiles = function(callback) {
      var realpath,
        _this = this;
      this._localFiles = [];
      this._remoteFiles = [];
      winston.info("local scan " + this.options.path);
      if (!fs.existsSync(this.options.path)) {
        return callback();
      }
      realpath = fs.realpathSync(this.options.path);
      return walkr(this.options.path).filter(function(file, next) {
        file.destination = file.source.replace(realpath, "");
        _this._localFiles.push(file);
        return next();
      }).start(callback);
    };

    /*
    */


    _Class.prototype._makeLocalManifest = function(callback) {
      var _this = this;
      this._localManifest = this._localFiles.map(function(file) {
        return {
          rpath: _this._dest(file.destination),
          lpath: file.source,
          mtime: new Date(file.stat.mtime).getTime(),
          ctime: new Date(file.stat.ctime).getTime(),
          dir: file.stat.isDirectory()
        };
      });
      return callback();
    };

    /*
    */


    _Class.prototype._uploadManifest = function(callback) {
      var chunkSize, chunks, content, i, o, self, _i, _ref;
      if (!this._localManifestDiff.length && !this._remoteManifestDiff.length) {
        winston.info("no changes to local or remote manifest.json");
        return;
      }
      winston.info("s3 put " + (this._manifestPath()));
      o = outcome.e(callback);
      self = this;
      content = JSON.stringify(this._localManifest);
      chunks = [];
      chunkSize = 1024 << 2;
      for (i = _i = 0, _ref = content.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = _i += chunkSize) {
        chunks.push(content.slice(i, i + chunkSize));
      }
      return step.async((function() {
        var req,
          _this = this;
        req = self._s3.put(self._manifestPath(), {
          "Content-Length": content.length,
          "Content-Type": "json"
        });
        return async.eachSeries(chunks, (function(chunk, next) {
          req.write(chunk);
          return setTimeout(next, 20);
        }), function() {
          req.end();
          return _this();
        });
      }), callback);
    };

    /*
    */


    _Class.prototype._dest = function(path) {
      return ("" + this.options.name + "/" + path).replace(/\\+/g, "").replace(/\/+/g, "/");
    };

    /*
    */


    _Class.prototype._manifestPath = function() {
      return this._dest("manifest.json");
    };

    return _Class;

  })();

}).call(this);
